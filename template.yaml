AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  SAM Template for airway shipment orchestrator app

Parameters:
  ShipmentRecordQueueName:
    Type: String
    Description: 'Name of the AWS SQS queue to be created'
    Default: ShipmentRecordQueue
  ShipmentRecordManualResubmitQueueName:
    Type: String
    Description: Name of the AWS SQS Manual resubmit queue to be created
    Default: ShipmentRecordManualResubmitQueue
  ShipmentRecordDLQueueName:
    Type: String
    Description: Name of the AWS SQS DeadLetter queue to be created
    Default: ShipmentRecordDLQueue
  ShipmentRecordTableName:
    Type: String
    Description: 'Name of the AWS DynamoDB Table for storing the shipment records'
    Default: ShipmentRecord
  ShipmentHashTableName:
    Type: String
    Description: 'Name of the AWS DynamoDB Table for storing the shipment hashes'
    Default: ShipmentHash
  AirwaysShipmentDetailTableName:
    Type: String
    Description: 'Name of the AWS DynamoDB Table for storing the Airways shipment labels'
    Default: AirwaysShipmentDetail
  UPSShipmentTrackingTableName:
    Type: String
    Description: 'Name of the AWS DynamoDB Table for storing the UPS shipment tracking'
    Default: UPSTracking

Resources:
  ShipmentRecordDLQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Ref ShipmentRecordDLQueueName
  ShipmentRecordQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Ref ShipmentRecordQueueName
      VisibilityTimeout: 300
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt ShipmentRecordDLQueue.Arn
        maxReceiveCount: 5
  ShipmentRecordManualResubmitQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Ref ShipmentRecordManualResubmitQueueName
      VisibilityTimeout: 300


  ShipmentHashDDB:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref ShipmentHashTableName
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: addrHashCode
          AttributeType: S
      KeySchema:
        - AttributeName: addrHashCode
          KeyType: HASH
      Tags:
        - Key: Name
          Value: ShipmentHashTable
  ShipmentRecordDDB:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref ShipmentRecordTableName
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: recordId
          AttributeType: S
        - AttributeName: addrHashCode
          AttributeType: S
      KeySchema:
        - AttributeName: addrHashCode
          KeyType: HASH
        - AttributeName: recordId
          KeyType: RANGE
      Tags:
        - Key: Name
          Value: ShipmentRecordTable
  AirwaysShipmentDetailDDB:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref AirwaysShipmentDetailTableName
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: shipmentRecordID
          AttributeType: S
      KeySchema:
        - AttributeName: shipmentRecordID
          KeyType: HASH
      Tags:
        - Key: Name
          Value: AirwaysShipmentDetail
  UPSTrackingDDB:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref UPSShipmentTrackingTableName
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: upsTracker
          AttributeType: S
      KeySchema:
        - AttributeName: upsTracker
          KeyType: HASH
      Tags:
        - Key: Name
          Value: UPSShipmentTracking


  StepFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "states.amazonaws.com"
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: StepFunctionAdditionalPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                # For event subscription & notification
                - "events:PutTargets"
                - "events:PutRule"
                - "events:DescribeRule"
                Resource:
                - !Sub arn:aws:events:${AWS::Region}:${AWS::AccountId}:rule/StepFunctionsGetEventsForStepFunctionsExecutionRule

              - Effect: Allow
                Action:
                # Logging
                - "logs:CreateLogGroup"
                - "logs:CreateLogStream"
                - "logs:CreateLogDelivery"
                - "logs:GetLogDelivery"
                - "logs:UpdateLogDelivery"
                - "logs:DeleteLogDelivery"
                - "logs:ListLogDeliveries"
                - "logs:PutLogEvents"
                - "logs:PutResourcePolicy"
                - "logs:DescribeResourcePolicies"
                - "logs:DescribeLogGroups"

                # Following required for step function to send/receive notification from child step function
                - "cloudwatch:PutMetricData"
                # For child step function invoke/stop
                - "states:StartExecution"
                - "states:StopExecution"
                - "states:DescribeExecution"
                # X-ray enabling
                - "xray:PutTraceSegments"
                - "xray:PutTelemetryRecords"
                - "xray:GetSamplingRules"
                - "xray:GetSamplingTargets"
                Resource:
                    - !Sub arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:*

              - Effect: Allow
                Action:
                # For Lambda invocations
                - "sqs:Get*"
                - "sqs:List*"
                - "sqs:Send*"
                - "sqs:Receive*"
                - "sqs:Delete*"
                Resource: [
                  !GetAtt ShipmentRecordQueue.Arn,
                  !GetAtt ShipmentRecordManualResubmitQueue.Arn,
                  !GetAtt ShipmentRecordDLQueue.Arn
                ]

        - PolicyName: DDBReadWrite
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:DescribeTable
                  - dynamodb:ListTables
                  - dynamodb:GetItem
                  - dynamodb:DeleteItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:Batch*
                Resource: [
                  !GetAtt ShipmentHashDDB.Arn,
                  !GetAtt ShipmentRecordDDB.Arn,
                  !GetAtt AirwaysShipmentDetailDDB.Arn,
                  !GetAtt UPSTrackingDDB.Arn
                ]
        - PolicyName: LambdaInvoke
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                # For Lambda invocations
                - "lambda:InvokeFunction"
                Resource:
                  - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:*

  ApiGatewayExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "apigateway.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
      - arn:aws:iam::aws:policy/AWSStepFunctionsFullAccess
      Policies:
        - PolicyName: APIGatewayPostToSQS
          PolicyDocument:
              Version: 2012-10-17
              Statement:
                - Effect: Allow
                  Action:
                  # For Queue operations
                  - "sqs:Get*"
                  - "sqs:List*"
                  - "sqs:Send*"
                  Resource: [
                      !GetAtt ShipmentRecordQueue.Arn,
                      !GetAtt ShipmentRecordManualResubmitQueue.Arn,
                      !GetAtt ShipmentRecordDLQueue.Arn
                    ]

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DDBReadWrite-CWLogging-StepFunctionExecution
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:DescribeTable
                  - dynamodb:ListTables
                  - dynamodb:CreateTable
                  - dynamodb:DeleteTable
                  - dynamodb:GetItem
                  - dynamodb:DeleteItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:Batch*
                Resource: [
                  !GetAtt ShipmentHashDDB.Arn,
                  !GetAtt ShipmentRecordDDB.Arn,
                  !GetAtt AirwaysShipmentDetailDDB.Arn,
                  !GetAtt UPSTrackingDDB.Arn
                ]
              - Effect: Allow
                Action:
                # Logging
                - "logs:CreateLogDelivery"
                - "logs:GetLogDelivery"
                - "logs:UpdateLogDelivery"
                - "logs:DeleteLogDelivery"
                - "logs:ListLogDeliveries"
                - "logs:PutResourcePolicy"
                - "logs:DescribeResourcePolicies"
                - "logs:DescribeLogGroups"
                - "cloudwatch:PutMetricData"
                - "states:StartExecution"
                - "states:StopExecution"
                # X-ray enabling
                - "xray:PutTraceSegments"
                - "xray:PutTelemetryRecords"
                - "xray:GetSamplingRules"
                - "xray:GetSamplingTargets"
                Resource:
                    - !Sub arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:*
              - Effect: Allow
                Action:
                # For Queue operations
                - "sqs:Get*"
                - "sqs:List*"
                - "sqs:Send*"
                - "sqs:Receive*"
                - "sqs:Delete*"
                Resource: [
                  !GetAtt ShipmentRecordQueue.Arn,
                  !GetAtt ShipmentRecordManualResubmitQueue.Arn,
                  !GetAtt ShipmentRecordDLQueue.Arn
                ]

  DDBTableHandlerFunction:
    Type: AWS::Serverless::Function
    DependsOn: [ LambdaExecutionRole ]
    Properties:
      FunctionName: DDBTableCleanupHandlerFunction
      CodeUri: functions/dynamodb_table_deletion/
      Handler: ddb_table_handler.lambda_handler
      Runtime: python3.9
      Timeout: 600
      Environment:
        Variables:
          SHIPMENT_HASH_TABLE: !Ref ShipmentHashDDB
          SHIPMENT_RECORD_TABLE: !Ref  ShipmentRecordDDB
          AIRWAYS_SHIPMENT_TABLE: !Ref AirwaysShipmentDetailDDB
          UPS_TRACKER_TABLE: !Ref UPSTrackingDDB
      Role: !GetAtt LambdaExecutionRole.Arn

  OrderValidatorFunction:
    Type: AWS::Serverless::Function
    DependsOn: [ LambdaExecutionRole, ShipmentRecordQueue ]
    Properties:
      FunctionName: OrderValidatorFunction
      CodeUri: functions/order_validator/
      Handler: validator.lambda_handler
      Runtime: python3.9
      Timeout: 300
      Environment:
        Variables:
          BUSINESS_VALIDATION_STEPFUNCTION: !GetAtt BusinessValidationStateMachine1.Arn
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        ShipmentRecordSQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt ShipmentRecordQueue.Arn
            BatchSize: 10

  AirwayShipmentGeneratorFunction:
    Type: AWS::Serverless::Function
    DependsOn: LambdaExecutionRole
    Properties:
      FunctionName: AirwayShipmentGeneratorFunction
      CodeUri: functions/airway_shipment_generator/
      Handler: app.lambda_handler
      Runtime: python3.9
      Timeout: 25
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          SHIPMENT_RECORD_TABLE: !Ref ShipmentRecordDDB

  ShipmentAddressGrouperFunction:
    Type: AWS::Serverless::Function
    DependsOn: LambdaExecutionRole
    Properties:
      FunctionName: ShipmentAddressGrouperFunction
      CodeUri: functions/shipment_address_grouper/
      Handler: shipment_grouper.lambda_handler
      Runtime: python3.9
      Timeout: 300
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          SHIPMENT_HASH_TABLE: !Ref ShipmentHashDDB


  UPSShipperFunction:
    Type: AWS::Serverless::Function
    DependsOn: LambdaExecutionRole
    Properties:
      FunctionName: UPSShipperFunction
      CodeUri: functions/ups_shipper/
      Handler: ups_app.lambda_handler
      Runtime: python3.9
      Timeout: 30
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          SIMULATE: True

  InventoryHandlerFunction:
    Type: AWS::Serverless::Function
    DependsOn: LambdaExecutionRole
    Properties:
      FunctionName: InventoryHandlerFunction
      CodeUri: functions/inventory_handler/
      Handler: inventory_app.lambda_handler
      Runtime: python3.9
      Timeout: 30
      Role: !GetAtt LambdaExecutionRole.Arn

  SupplierHandlerFunction:
    Type: AWS::Serverless::Function
    DependsOn: LambdaExecutionRole
    Properties:
      FunctionName: SupplierHandlerFunction
      CodeUri: functions/supplier_handler/
      Handler: supplier_app.lambda_handler
      Runtime: python3.9
      Timeout: 30
      Role: !GetAtt LambdaExecutionRole.Arn

  UPSShipmentHandlerStateMachine4:
    Type: AWS::Serverless::StateMachine # More info about State Machine Resource: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-statemachine.html
    Properties:
      Name: UPSShipmentHandlerStateMachine4
      DefinitionUri: statemachine/upsshipment_handler_step_function.asl.json
      Role: !GetAtt StepFunctionRole.Arn
      DefinitionSubstitutions:
        ShipmentHashTable: !Ref ShipmentHashDDB
        ShipmentRecordTable: !Ref ShipmentRecordDDB
        UPSTrackingTable: !Ref UPSTrackingDDB
        UPSShipperService: !GetAtt UPSShipperFunction.Arn

  SAWBProcessorStateMachine3:
    Type: AWS::Serverless::StateMachine # More info about State Machine Resource: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-statemachine.html
    Properties:
      Name: SAWBProcessorStateMachine3
      DefinitionUri: statemachine/sawbprocessing_step_function.asl.json
      Role: !GetAtt StepFunctionRole.Arn
      DefinitionSubstitutions:
        ShipmentHashTable: !Ref ShipmentHashDDB
        ShipmentRecordTable: !Ref ShipmentRecordDDB
        UPSTrackingTable: !Ref UPSTrackingDDB
        AirwaysShipmentTable: !Ref AirwaysShipmentDetailDDB
        BusinessRulesValidator: !GetAtt OrderValidatorFunction.Arn
        ShipmentQueueUrl: !Join [ "/", [ !Sub "https://sqs.${AWS::Region}.amazonaws.com", !Ref AWS::AccountId, !Ref ShipmentRecordQueueName ] ]
        ShipmentDLQueueUrl: !Join [ "/", [ !Sub "https://sqs.${AWS::Region}.amazonaws.com", !Ref AWS::AccountId, !Ref ShipmentRecordDLQueueName  ] ]
        SAWBHandler: !GetAtt AirwayShipmentGeneratorFunction.Arn
        InventoryHandler: !GetAtt InventoryHandlerFunction.Arn
        SupplierHandler: !GetAtt SupplierHandlerFunction.Arn
        UPSShipperService: !GetAtt UPSShipperFunction.Arn
        UPSShipmentHandlerStepFunction: !GetAtt UPSShipmentHandlerStateMachine4.Arn

  AggregationKickoffStateMachine2:
    Type: AWS::Serverless::StateMachine
    #DependsOn: [ ]
    Properties:
      Name: AggregationKickoffStateMachine2
      DefinitionUri: statemachine/aggregation_kickoff_step_function.asl.json
      Role: !GetAtt StepFunctionRole.Arn
      DefinitionSubstitutions:
        SWABProcessorStepFunction: !GetAtt SAWBProcessorStateMachine3.Arn
        ShipmentAddressGrouperFunction: !GetAtt ShipmentAddressGrouperFunction.Arn
        ShipmentQueueUrl: !Join [ "/", [ !Sub "https://sqs.${AWS::Region}.amazonaws.com", !Ref AWS::AccountId, !Ref ShipmentRecordQueueName ] ]
        ShipmentDLQueueUrl: !Join [ "/", [ !Sub "https://sqs.${AWS::Region}.amazonaws.com", !Ref AWS::AccountId, !Ref ShipmentRecordDLQueueName ] ]

  BusinessValidationStateMachine1:
    Type: AWS::Serverless::StateMachine
    Properties:
      Name: BusinessValidationStateMachine1
      DefinitionUri: statemachine/business_validation_step_function.asl.json
      Role: !GetAtt StepFunctionRole.Arn
      DefinitionSubstitutions:
        ShipmentHashTable: !Ref ShipmentHashDDB
        ShipmentRecordTable: !Ref ShipmentRecordDDB
        ShipmentQueueUrl: !Join [ "/", [ !Sub "https://sqs.${AWS::Region}.amazonaws.com", !Ref AWS::AccountId, !Ref ShipmentRecordQueueName ] ]
        ShipmentManualResubmitQueueUrl: !Join [ "/", [ "https://sqs.${AWS::Region}.amazonaws.com", !Ref AWS::AccountId, !Ref ShipmentRecordManualResubmitQueueName  ] ]
        ShipmentDLQueueUrl: !Join [ "/", [ !Sub "https://sqs.${AWS::Region}.amazonaws.com", !Ref AWS::AccountId, !Ref ShipmentRecordDLQueueName  ] ]

  AirwaysShipmentApi:
    Type: AWS::Serverless::Api
    EndpointConfiguration: REGIONAL
    Properties:
      Name: AirwaysShipmentRestApi
      StageName: dev
      OpenApiVersion: '2.0'
      DefinitionBody:
        swagger: '2.0'
        info:
          version: '2021-10-29T14:45:50Z'
          title: AirwaysShipmentRest
        schemes:
        - https
        paths:
          "/postShipment":
            post:
              consumes:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    "$ref": "#/definitions/Empty"
              x-amazon-apigateway-integration:
                httpMethod: "POST"
                credentials: !GetAtt ApiGatewayExecutionRole.Arn
                uri:  !Join ["/", [!Sub "arn:aws:apigateway:${AWS::Region}:sqs:path/${AWS::AccountId}", !Ref ShipmentRecordQueueName ] ]
                responses:
                  default:
                    statusCode: '200'
                requestParameters:
                  integration.request.header.Content-Type: "'application/x-www-form-urlencoded'"
                requestTemplates:
                  application/json: "Action=SendMessage&MessageBody=$input.body"
                passthroughBehavior: "when_no_templates"
                type: "aws"


Outputs:
  ShipmentRecordQueue:
    Description: Shipment Record Queue for processing of shipments
    Value: !Ref ShipmentRecordQueueName
  BusinessValidatorStepFunction:
    Value: !Ref BusinessValidationStateMachine1
    Description: Name of the Business validation step function
  AggregationKickoffStepFunction:
    Value: !Ref AggregationKickoffStateMachine2
    Description: Name of the Shipment Aggregator step function
  SAWBProcessorStepFunction:
    Value: !Ref SAWBProcessorStateMachine3
    Description: Name of the SAWB Processor step function
  UPSShipmentHandlerStepFunction:
    Value: !Ref UPSShipmentHandlerStateMachine4
    Description: Name of the UPS Shipment Handler step function
  AirwaysShipmentApi:
    Value: !Ref AirwaysShipmentApi
    Description: API Endpoint for submission of the inventory shipment orders
