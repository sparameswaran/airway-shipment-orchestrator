{
  "Comment": "SAWB Processing state machine",
  "StartAt": "Invoke SAWB",
  "States": {
    "Invoke SAWB": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "ResultSelector": {
        "AirwayBillResponse.$": "$.Payload"
      },
      "ResultPath": "$.AirwayBill",
      "Parameters": {
        "Payload.$": "$",
        "FunctionName": "${SAWBHandler}"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 6,
          "BackoffRate": 2
        }
      ],
      "Next": "Save ShipmentBill"
    },
    "Save ShipmentBill": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:putItem",
      "ResultPath": null,
      "Parameters": {
        "TableName": "${AirwaysShipmentTable}",
        "Item": {
          "addrDateHash": {
            "S.$": "$.AirwayBill.AirwayBillResponse.addrDateHash"
          },
          "processDate": {
            "S.$": "$.AirwayBill.AirwayBillResponse.processDate"
          },
          "processTime": {
            "S.$": "$.AirwayBill.AirwayBillResponse.processTime"
          },
          "shipmentRecordID": {
            "S.$": "$.AirwayBill.AirwayBillResponse.sawb_bill_number"
          },
          "processTime": {
            "S.$": "$$.State.EnteredTime"
          },
          "body": {
            "S.$": "States.JsonToString($.AirwayBill)"
          }
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "States.TaskFailed"
          ],
          "BackoffRate": 2,
          "IntervalSeconds": 1,
          "MaxAttempts": 6,
          "Comment": "Retry DDB inserts/updates"
        }
      ],      
      "Next": "Invoke Inventory"
    },
    "Invoke Inventory": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "ResultSelector": {
        "inventory.$": "$.Payload.Inventory"
      },
      "ResultPath": "$.InventoryResult",
      "Parameters": {
        "Payload.$": "$",
        "FunctionName": "${InventoryHandler}"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 6,
          "BackoffRate": 2
        }
      ],
      "Next": "Choice"
    },
    "Choice": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.InventoryResult.inventory.available",
          "IsPresent": false,
          "Next": "ReplaceSupplier"
        }
      ],
      "Default": "GoWithSupplier"
    },
    "GoWithSupplier": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "OutputPath": "$.Payload",
      "Parameters": {
        "Payload.$": "$",
        "FunctionName": "${SupplierHandler}"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 6,
          "BackoffRate": 2
        }
      ],
      "Next": "Get ShipmentGroups By Sub-partitions"
    },
    "ReplaceSupplier": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "OutputPath": "$.UPSShippingResponse",
      "Parameters": {
        "Payload.$": "$",
        "FunctionName": "${SupplierHandler}"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 6,
          "BackoffRate": 2
        }
      ],
      "Next": "Get ShipmentGroups By Sub-partitions"
    },
    "Get ShipmentGroups By Sub-partitions": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${ShipmentAddressDateGrouperFunction}",
        "Payload.$": "$"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 6,
          "BackoffRate": 2
        }
      ],
      "Next": "Map based on Address partitions",
      "ResultSelector": {
        "AddrDateMap.$": "$.Payload"
      },
      "ResultPath": "$.AddressDateMap"
    },
    "Map based on Address partitions": {
      "Type": "Map",
      "Next": "Get Length of ProcessedRecords",
      "Iterator": {
        "StartAt": "Handle Shipment by Address Partitions",
        "States": {
          
          "Handle Shipment by Address Partitions": {
            "Type": "Task",
            "Resource": "arn:aws:states:::states:startExecution.sync:2",
            "Parameters": {
              "StateMachineArn": "${ShipmentPartitionHandlerStepFunction}",
              "Input": {
                "AddressHash.$": "$.AddressHash",
                "AddressDateHash.$": "$.AddressDateHash",
                "AirwayBillNumber.$": "$.AirwayBillNumber",
                "AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID.$": "$$.Execution.Id"
              }
            },
            "ResultPath": "$.ProcessedRecords",
            "Next": "Update ShipmentHash As Processed with ShipmentRecord"
          },
            
          "Update ShipmentHash As Processed with ShipmentRecord": {
            "Type": "Task",
            "Resource": "arn:aws:states:::dynamodb:updateItem",
            "ResultPath": "$.GroupShipmentHashUpdate",
            "Parameters": {
              "TableName": "${ShipmentHashTable}",
              "Key": {
                "addrHashCode": {
                  "S.$": "$.AddressHash"
                },
                "addrDateHash": {
                  "S.$": "$.AddressDateHash"
                }
              },              
              "UpdateExpression": "SET wasProcessed = :myValueRef, sawbHash = :sawbHashRef",
              "ExpressionAttributeValues": {
                ":myValueRef": {
                  "S": "true"
                },
                ":sawbHashRef": {
                  "S.$": "$.AirwayBillNumber"
                }
              }
            },
            "Retry": [
              {
                "ErrorEquals": [
                  "States.TaskFailed"
                ],
                "BackoffRate": 2,
                "IntervalSeconds": 1,
                "MaxAttempts": 6,
                "Comment": "Retry DDB inserts/updates"
              }
            ],            
            "End": true
          }
        }
      },
      "ItemsPath": "$.AddressDateMap.AddrDateMap",
      "Parameters": {
        "AddressDateHash.$": "$$.Map.Item.Value",
        "AddressHash.$": "$.addrHashCode",
        "AirwayBillNumber.$": "$.AirwayBill.AirwayBillResponse.sawb_bill_number"
      },
      "ResultPath": "$.ProcessedRecords"
    },
    "Get Length of ProcessedRecords": {
      "Type": "Pass",
      "Parameters": {
        "ProcessedRecordsLen.$": "States.ArrayLength($.ProcessedRecords)"
      },
      "ResultPath": "$.ProcessedRecordsLen",
      "Next": "Check for Outputs in ProcessedRecords"
    },
    "Check for Outputs in ProcessedRecords": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.ProcessedRecordsLen.ProcessedRecordsLen",
          "NumericEquals": 0,
          "Next": "Pass Outer ProcessedRecords from SAWB"
        }
      ],
      "Default": "Save Nested Results of SAWB"
    },
    "Pass Outer ProcessedRecords from SAWB": {
      "Type": "Pass",
      "OutputPath": "$.ProcessedRecords",
      "End": true
    },
    "Save Nested Results of SAWB": {
      "Type": "Pass",
      "OutputPath": "$.ProcessedRecords[*].Output",
      "End": true
    }
  }
}